<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="POSapplication" default="build">

	<!-- Definitions of variables used during the rest of this script -->
	<property file="build.properties"/>
	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes.dir" value="${build.dir}/classes"/>
	<property name="src.dir" value="${basedir}/src"/>
	<property name="dist.dir" value="${build.dir}/jar"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property file="version.properties" />
	
	<!-- database variables -->
	<property name="data.dir"	value="${basedir}/data"/>
	<property name="db.file"	value="${data.dir}/POSdb"/>
	<property name="db.alias"	value="POS"/>
	<property name="db.url" 	value="jdbc:hsqldb:hsql://localhost/POS"/>
	<property name="lib.hibernate.dir"   value="${lib.dir}/hibernate"/>

	
	<condition property="dist.has.run">
		<available classname="" property="" file="${dist.dir}/lovilouad.jar"/>
	</condition>
	
	<!-- Classpath for running the application -->
	<path id="run.classpath">
		<pathelement location="${build.classes.dir}"/>
		 <!-- configuration -->
		<pathelement location="${conf.dir}"/>
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${lib.hibernate.dir}">
		        <include name="*.jar"/>
		</fileset>
	</path>
	
	<!-- Classpath for building the application -->
	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${lib.hibernate.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<!-- Definitions of runnable ant targets.
         Run them from the command line by executing "ant [targetname]"  -->
	
	<!-- Clean up build system results -->
	<target name="clean" description="Clean up build system results">
		<delete dir="${build.dir}"/>
	</target>
	
	<!-- Build the system -->
	<target name="build" description="Build the system">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<javac
            srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            debug="true"
            debuglevel="lines,vars,source"
            encoding="utf-8"
            compiler="modern"
            target="1.7"
            source="1.7"
			includeantruntime="false">	
			<classpath refid="build.classpath"/>
		</javac>
	</target>
	
	<!-- Run the POS application -->
	<target name="run" depends="build" description="Run the POS application">
		<java classname="ee.ut.math.tvt.lovilouad.Intro" classpathref="run.classpath" fork="yes">
			<jvmarg value="-Xdebug" />
		    <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
		</java>
	</target>
	
	<!-- Create the JAR file -->
	<target name="dist" depends="build" description="Creates the jar file and adds to the version number">
		
		<propertyfile file="version.properties">
			<entry  key="build.revision.number" type="int" default="1" operation="+" value="1"/>
		</propertyfile>
		<property file="version.properties"/>
		<propertyfile file="version.properties">
			<entry  key="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
		</propertyfile>
		
		<mkdir dir="${dist.dir}"/>
		<manifestclasspath property="manifest.classpath" jarfile="${dist.dir}/lovilouad.jar">
			<classpath>
		        <fileset dir="${dist.dir}" includes="*.jar"/>
				<fileset dir="${lib.dir}" includes="*.jar"/>
		    </classpath>
		</manifestclasspath>
		<jar destfile="${dist.dir}/lovilouad.jar" basedir="${build.dir}/classes">
			<fileset dir="${basedir}" includes="images/ lib/ application.properties version.properties log4j.properties" />
			<manifest>
				<attribute name="Main-Class" value="ee.ut.math.tvt.lovilouad.Intro"/>
			    <attribute name="Class-Path" value="${manifest.classpath}"/>
			</manifest>
		</jar>
	</target>
	
	<!-- Run the JAR file -->
	<!-- I used IF instead of DEPENDS to prevent jrun from executing dist again -->
	<target name="jrun" description="Runs the programme using the jar file" if="dist.has.run">
		<java jar="${dist.dir}/lovilouad.jar" fork="yes" />
	</target>
	
	<!-- Run from the console -->
	<target name="runc" depends="build" description="Run the application (console)">
		<java classname="ee.ut.math.tvt.lovilouad.Intro" classpathref="run.classpath" fork="yes">
			<arg value="console" />
		</java>
	</target>
	
	<!-- Commit all changes with users message and pushes them to GitHub server -->
	<target name="git_commit" description="Commits all the changes to GitHub server">
		<!--Select all the changes for commit-->
		<exec executable="git" dir=".">
			<arg value="add" />
			<arg value="--all" />
		</exec>
		<!--Ask for commit message and commit-->
		<input message="Please insert comment for commit, default is build number:"
			addproperty="commit-comment" defaultvalue="Version ${build.number}" />
		<echo message="Commit comment: ${commit-comment}" />
		<exec executable="git" dir=".">
			<arg value="commit" />
			<arg value="-m" />
			<arg value="${commit-comment}" />
		</exec>
		<!--Push changes to GitHub server-->
		<exec executable="git" dir=".">
			<arg value="push"/>
			<arg value="origin"/>
			<arg value="master"/>
		</exec>
	</target>
	
	<!-- Asks tag name and comment, creates a tag and pushes tags to GitHub server -->
	<target name="git_tag" description="Creates a tag and pushes all tags to GitHub server">
		<!--Ask for tag name and comment-->
		<input message="Please insert tag's name" addproperty="tag-name" defaultvalue="homework_${build.revision.number}" />
		<input message="Please insert tag's comment" addproperty="tag-comment" defaultvalue="Homework ${build.revision.number}" />
		<!--Create a tag using user input-->
		<exec executable="git" dir=".">
			<arg value="tag"/>
			<arg value="-a"/>
			<arg value="${tag-name}"/>
			<arg value="-m"/>
			<arg value="${tag-comment}"/>
		</exec>
		<!--Push all tags to GitHub server-->
		<exec executable="git" dir=".">
			<arg value="push"/>
			<arg value="--tags"/>			
		</exec>
	</target>
	
	<!--Adding two additional targets dbmanager and startdb -->
	<target name="dbmanager" description="Start the HSQLDB manager">
		<java classname="org.hsqldb.util.DatabaseManagerSwing" 
			classpathref="run.classpath" fork="yes">
			<arg line="--user sa --url ${db.url}" />
		</java>
	</target>

	<target name="startdb" description="Start the HSQLDB with the default params">
		<java classname="org.hsqldb.Server" classpathref="run.classpath" fork="yes">
			<arg line="-database.0 '${db.file}' -dbname.0 '${db.alias}'" />
		</java>
	</target>
	
</project>